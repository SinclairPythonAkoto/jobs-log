Jobs Log TEST

This is a basic web app that creates a table visble for the viewer to see after they submit entries from the homepage.

This file is intended to walk through the step-by-step process I undergone to query my postgres table.

The postgres is being used locally, before setting it up remotely.

# TP-1		[test.py]
AIM:		Set up postgres table through pgAdmin 	

OUTCOME:	table created - "test_table"
		6 columns (id, name, age, profession, city, country)
		REMEMBER!! this is your localhost postgres!


# TP-2		[test.py]
AIM:		set up your flask file - "test.py"

OUTCOME:	quick hello world page to test code
		sql engine & class created for database
		hello world started ok

# TP-3		[test.py]
AIM:		create homepage - choose between enter log or run report 

OUTCOME:	create the base template for my html
		then the homepage (with jinja) & reports page (later)
		inclauded a class for table and put in a variable
		with a few trail & error techniques found a way to add into a table and display back via post method
		** I have noticed that when I exit the page and reload it, the information is lost which means that the data is NOT being committed into the database..

#TP-4		[test.py]
AIM:		make a reports page
		report options = column names
		do a basic report then more detailed later

OUTCOME:	I have realised that the way I set up my log, I won't be able to run a
		report like my original jobs log.  This is becuase I haven't set up options for the user to select.
		By doing this I can only select all from the coloum - just to see if it works.  I will use jinja elif template to give defferent outcomes for each selected column report.
		I used "session.query(database)" to query my database then "order_by(database.id)" to order each entry. After that I can manipulate what I want to reveal in the jinja template when I run a for loop over the database variable.  After that I can easily access the database with "d.id"/"d.name"/"d.city"


CONCLUSION:	I like the way I add data into the database by creating a variable
		for the raw data, then executing the ".add()" method to add the variable into the database class. [lines 48-51 test.py]
		I also like the fact that I can manipulate the report page with the jinja if,elif, else templates; a different page will be generated depending on which the user selects to report.  This saves time from writing out seperate html pages for each report category.
		Then I will have to recreate the profession section and add 4 select
		options: media, catering, security, web developer.  If this works this can be reaaplied to my orginal jobs log.
		This will be in test2.py - I will also include another table displaying the salary (which link both tables with a foreign key).
		test3.py will be when I send the report values (via email) to any given email the user provides.  I suspect all I will have to do is use the "data" variable with Flask-Mail in order to send the data as a csv file.

		REMEMBER!! to connect to my postgres locally I had to create the engine and pass my posgres through it; to connect to your remote postgres you have to import os and include os.getenv() when you pass the postgres through the engine.
		LOCAL 	- 	engine = create_engine("postgresql://username:password@localhost/database", echo = True)
		REMOTE 	- 	engine = create_engine(os.getenv("DATABASE_URL"), echo = True)
		* The DATABASE_URL is your environment variable you can create in Heroku or Bash.

		REMEMBER!! to session.commit() AFTER you session.add(db_entry) !

# TP-5		[test2.py]
AIM:		Change the profession so the user can choose from an option of 4 different professions (media, catering, security, web developer).
			Include date category for users to input.
			Will have to use filter_by() method to match each profession.
			Develop more detailed searches.
			
OUTCOME:	Had to create a new table "test2_table" and replace the table-name "test_table" in the class.
			In postgres to create a date coloumn you would put DATE, TIME or TIMESTAMP.
			For my purpose I will use DATE; in SQLAlchemy you use Column('column-name', Date)
			Found the way to join two tables togther in SQLAlchemy; will soon test.
			Also created a group of dummy data (entries from test.py) in my postgress.
			So far I have created the two tables (in postgres CLI & Flask) and linked the two tables togther.
			I have also changed the report functionality for the profession catergory - which works! I have only tested it on
			At first I tried to do session.query(table).filter(table.column='value') but this did not work because of the syntax error.  The correct way is: session.query(table).filter(table.column=='value'); there is also filter_by() method which I'm yet to explore.

# TP-6		[test2.py]
AIM:		create data for salary table; only 5-10 entries
			chnage the information displayed in profession table after a report is run; should be able to view: id, name, profession
			After that include the salary and join two together.
			Include flash messages to give the user a message everytime they log an entry; can be used to give user different messages throughout web app.

OUTCOME:	I have tried to link the tables togther using the psql CLI and the .join()
syntax but it failed.
			I have seen a video tutorial of creating one-to-many relationships; also the explaination of how 'backref' is used - I need to look more into it.
			As far as I'm aware, backref gives a virtual-like colum attached to the class.
			I will make an attempt of this to join the two tables together.
			I can't seem to be able to link my two tables togther; I know how to do it with the psql commmand line, however I don't know how to do it successfully with SQLAlchemy
			I want to delete the tables and start again but I think I would come across the same errors.
			OK I will delete (drop) the yearly_salary table; infact I will rename it and call the table column 'wages'.  I have seen a documentation that explains how building relatoionships between classes work.  If I try out the documentation first before creating a new table.
			I have spent literally 48hrs trying to get the two tables to join; I have achieved this in my postgres - when it is joined a new table with all the fields are contructed.
			I have intalled sqlitis which onverts SQL syntax into SQLAlchemy expressions.
			test2.py ON HOLD.

# TP-7		[test2.py]
AIM:		Post my code onto stackoverflow.com to find a solution to joining my two tables correctly.

OUTCOME:	It appears that my syntax was incorrect.
			The way I was trying to join "Salary.id" onto the test2_table was wrong.
			Basically in the wages variable (where we set our relationship with the secondary table to the primary), I needed to reset the primaryjoin to Salary.test_id; test_id is the column in the salary table where we have the foreign key constraint.
			CODE: primaryjoin="Test_db_02.id == Salary.test2_id"
			Also I had to make a few small changes to the syntax database query; before when joining the two tables (with .join()), I had incorrectly set it wrong.  ".join(test2_table.salary)" are the names of the two tables that I'm joinning; These are the two tables names that have been set for the database in their respective classes.  The correct code is visble below. 
			CORRECT CODE: db_entry = session.query(Test_db_02).join(Test_db_02.salary)
			Need to find a way to query the tables after they have been joined.

CONCLUSION:	When the class name and the table name are different it becomes a little tricky to tell apart.  This is vital beacuse in some code (like when joining two tables together) you need to tell the difference from both; if you get them mixed up it wil break your code.



# TP-8		[test3.py]
AIM:		To create a platform to send an email of the report entries to any given email supplied by the user.

OUTCOME:	I had to recreate my main table on the PSQL command line - test3_table.
			I also changed the name of the database class so it is capitalised and matching the table name.
			I entered the table data through PSQL CLI
			I had to change the table columns and entries in "reports.html" & "test3.py"
			I included some more entries into html reports page; within each jinja iterable template, included an input email & send email tag.  With the iput email assigned to a name attribute, it becomes easier to select the value and pass it into my python variable.
			** I used the "try:" method for the first time but it didn't work.
			I need to find a way to execute two different buttons (to give two different outcomes) in the same form tag.
			I post my code to stackoverflow.com to see if I could find a solution; in the meantime I will now work on my first version of my jobs log (without the email functionality).

# TP-9		[jobs_log_01.py]
AIM:		Create my first version of my jobs log web app.
			Must contain: 
			A date input, time input, choose the type of job, write any descriptions, chose an outcome, write any comments about the job, date & time stamp 

OUTCOME:	When trying to store the time & date stamp, I creayted the columns as 'VARCHAR' so it meant that when I entred a log from my app it wasn't being stored.
			I realised I can store both the date & time separetely in SQL as 'DATE' & 'TIME' datatypes.
			So I quickly dropped (deleted) the table and started again.
			The "TRUNCATE TABLE" statement is used to delete the data inside a table, but not the table itself.  "TRUNCATE TABLE table_name;"
			This quickly solved my problem and allowed me to move on.
			I will add flash messages to my app to give error warnings.
			** I tried to use flash but I needed a secret key in order for it to work; I have seen this before but I didn't know that it's also needed to use flash messages.  I will look into this when I do further studies & rebuilds of this web app.

# TP-10		[jobs_log_01.py]
AIM:		Create a navigation bar at the top of each page that will direct you to job reports & outcome reports page.

OUTCOME:	Found a way to create a naigation bar at the top of the screen (through w3schools.com);
			I remembered you can create a class within a tag and then give it a styling in the "style" tag, and refrence the class name by ".CLASS-NAME"
			This works PERFECTLY! Now I know that I can apply this to when I'm building my portforlio.
			Also, I will look into how I can change the "style" tag and replace it with a CSS file with all the style attributes inside.